const emojis = {
  'estrella': '‚≠ê',
  'botella de agua': 'üçº',
  'bal√≥n de soccer': '‚öΩ',
  'bal√≥n de basket': 'üèÄ',
  'bat': 'üèè',
  'celular': 'üì±',
  'cuadrado': 'üî≤',
  'coche': 'üöó',
  '√°rbol': 'üå≥',
  's√°ndwich': 'ü•™'
};

let figuras = Object.keys(emojis);
const tarjetasOriginal = [...figuras, ...figuras];
tarjetasOriginal.sort(() => 0.5 - Math.random());

let tarjetas = [...tarjetasOriginal];
let seleccionadas = [];
let encontradas = [];
let aciertos = 0;
let errores = 0;
let tiempoRestante = 180;
let temporizador;

const id_ejercicio = 17;
const ruta = "/ejercicios_numeros/memorama/guardar-calificacion";

const memorama = document.getElementById('memorama');
const ladoIzq = document.getElementById('ladoIzquierdo');
const ladoDer = document.getElementById('ladoDerecho');
const intentosSpan = document.getElementById('intentos');
const estado = document.getElementById('estado');
const tiempo = document.getElementById('tiempo');
const reiniciarBtn = document.getElementById('reiniciar');
const audioCorrecto = document.getElementById('audioCorrecto');
const audioIncorrecto = document.getElementById('audioIncorrecto');

const maxIntentos = 5;
const today = new Date().toISOString().split('T')[0];

let lastAttemptDate = localStorage.getItem(`lastAttemptDate_${id_ejercicio}`) || "";
let globalAttempts = parseInt(localStorage.getItem(`globalAttempts_${id_ejercicio}`)) || 0;

if (lastAttemptDate !== today) {
  globalAttempts = 0;
  localStorage.setItem(`lastAttemptDate_${id_ejercicio}`, today);
  localStorage.setItem(`globalAttempts_${id_ejercicio}`, globalAttempts);
}

function iniciarJuego() {
  if (globalAttempts >= maxIntentos) {
    Swal.fire({
      icon: 'info',
      title: 'L√≠mite alcanzado',
      text: 'Has alcanzado el n√∫mero m√°ximo de intentos para hoy.',
      confirmButtonText: 'Aceptar'
    });
    estado.innerHTML = "Has alcanzado el m√°ximo de intentos.";
    reiniciarBtn.style.display = 'none';
    return;
  }

  tarjetas = [...tarjetasOriginal];
  seleccionadas = [];
  encontradas = [];
  aciertos = 0;
  errores = 0;
  tiempoRestante = 180;

  intentosSpan.textContent = maxIntentos - globalAttempts;
  estado.innerHTML = `Intentos restantes: ${maxIntentos - globalAttempts}`;
  ladoIzq.innerHTML = '<strong>Pares encontrados:</strong><br />';
  ladoDer.innerHTML = '';
  reiniciarBtn.style.display = 'none';
  clearInterval(temporizador);
  temporizador = setInterval(actualizarTiempo, 1000);
  renderizar();
}

function actualizarTiempo() {
  if (tiempoRestante <= 0 || encontradas.length === tarjetas.length) {
    clearInterval(temporizador);
    finalizar();
  } else {
    tiempoRestante--;
    let minutos = Math.floor(tiempoRestante / 60);
    let segundos = tiempoRestante % 60;
    tiempo.textContent = `Tiempo restante: ${minutos}:${segundos < 10 ? '0' : ''}${segundos}`;
  }
}

function renderizar() {
  memorama.innerHTML = '';
  tarjetas.forEach((figura, i) => {
    const carta = document.createElement('div');
    carta.classList.add('card');
    if (seleccionadas.includes(i) || encontradas.includes(i)) {
      carta.textContent = emojis[figura];
    } else {
      carta.classList.add('hidden');
      carta.textContent = '';
    }
    carta.onclick = () => seleccionar(i);
    memorama.appendChild(carta);
  });
}

function seleccionar(i) {
  if (seleccionadas.length === 2 || seleccionadas.includes(i) || encontradas.includes(i)) return;

  seleccionadas.push(i);
  renderizar();

  if (seleccionadas.length === 2) {
    setTimeout(() => verificarPareja(), 800);
  }
}

function verificarPareja() {
  const [i1, i2] = seleccionadas;
  if (tarjetas[i1] === tarjetas[i2]) {
    encontradas.push(i1, i2);
    mostrarPare(tarjetas[i1]);
    aciertos++;
    audioCorrecto.play();
  } else {
    errores++;
    audioIncorrecto.play();
  }
  seleccionadas = [];
  renderizar();
}

function mostrarPare(nombre) {
  const elem = document.createElement('div');
  elem.textContent = emojis[nombre];
  ladoIzq.appendChild(elem);
  ladoDer.appendChild(elem.cloneNode(true));
}

function finalizar() {
  globalAttempts++;
  localStorage.setItem(`globalAttempts_${id_ejercicio}`, globalAttempts);  // ‚Üê Aqu√≠ est√° el fix

  const total = aciertos + errores;
  const calificacion = total === 0 ? 0 : (10 * aciertos / total).toFixed(1);
  estado.innerHTML = `Intento ${globalAttempts} terminado üéâ<br>Calificaci√≥n: ${calificacion}`;
  reiniciarBtn.style.display = globalAttempts < maxIntentos ? 'inline-block' : 'none';

  const fecha = new Date().toISOString().split('T')[0];

  fetch(ruta, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      intento: globalAttempts,
      calificacion: calificacion,
      id_ejercicio,
      fecha
    })
  })
    .then(response => response.json())
    .then(data => {
      Swal.fire({
        icon: 'success',
        title: '¬°Calificaci√≥n registrada!',
        text: `Tu calificaci√≥n fue de ${calificacion}/10.`,
        confirmButtonText: 'Aceptar'
      }).then(() => {
        mostrarMensajeMotivacional(calificacion);  // ‚Üê Ahora s√≠ se ejecutar√°
      });
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Hubo un problema al guardar tu calificaci√≥n.',
        confirmButtonText: 'Aceptar'
      });
      console.error('Error al guardar calificaci√≥n:', error);
    });
}


function reiniciarJuego() {
  iniciarJuego();
}

iniciarJuego();

function mostrarMensajeMotivacional(calificacionRaw) {
  let calificacion = Number(calificacionRaw);
  let mensaje = "";

  const bajo = [
    "Te hace falta m√°s pr√°ctica, ¬°no te desanimes!",
    "A√∫n hay √°reas que mejorar, sigue esforz√°ndote.",
    "Est√°s comenzando, cada error es una oportunidad de aprender.",
    "No fue tu mejor intento, pero puedes mejorar mucho m√°s.",
    "Sigue practicando, est√°s en el camino del aprendizaje.",
    "Con dedicaci√≥n lo lograr√°s, ¬°√°nimo!",
    "Todav√≠a no lo dominas, pero vas por buen camino.",
    "Este resultado es una base para seguir creciendo.",
    "Requiere m√°s atenci√≥n y pr√°ctica, no te rindas.",
    "Vuelve a intentarlo, cada paso cuenta."
  ];

  const medio = [
    "¬°Estuviste cerca! Solo falta un poco m√°s de pr√°ctica.",
    "Buen trabajo, sigue as√≠ y lo lograr√°s.",
    "¬°Por poco! No te rindas, vas muy bien.",
    "Vas por buen camino, ¬°√°nimo!",
    "¬°Casi lo consigues! Un poco m√°s de esfuerzo y lo lograr√°s.",
    "Buen intento, no est√°s lejos del objetivo.",
    "Contin√∫a as√≠, tu esfuerzo est√° dando frutos.",
    "¬°Sigue practicando! Est√°s muy cerca del 10.",
    "Buen desempe√±o, te falta poco para la perfecci√≥n.",
    "¬°Excelente progreso! No te detengas."
  ];

  const alto = [
    "¬°Fabuloso! Est√°s haciendo un trabajo incre√≠ble.",
    "¬°Lo lograste! Sigue as√≠.",
    "¬°Excelente resultado! Tu esfuerzo se nota.",
    "¬°Perfecto! Se nota tu dedicaci√≥n.",
    "¬°Muy bien hecho! Contin√∫a aprendiendo con entusiasmo.",
    "¬°Genial! Est√°s dominando este tema.",
    "¬°Brillante! Sigue manteniendo ese nivel.",
    "¬°Orgulloso de tu progreso!",
    "¬°Gran trabajo! Est√°s aprendiendo de forma excelente.",
    "¬°Sigue as√≠! El √©xito es tuyo."
  ];

  const cero = [
  "Todos empezamos desde cero, lo importante es seguir intentando.",
  "No te preocupes, fallar es parte del proceso de aprender.",
  "Hoy no fue tu d√≠a, pero puedes hacerlo mucho mejor, sigue practicando.",
  "¬°No te rindas! Cada error te acerca m√°s al acierto.",
  "Es solo el comienzo, lo importante es que sigas aprendiendo.",
  "Los grandes logros comienzan con peque√±os pasos, ¬°int√©ntalo de nuevo!",
  "Aprender toma tiempo, lo lograr√°s con pr√°ctica.",
  "Un tropiezo no define tu camino. ¬°√Ånimo!",
  "A veces fallar nos ense√±a m√°s que acertar. ¬°Sigue adelante!",
  "Tener 0 hoy no significa que no puedas tener 10 ma√±ana. ¬°Conf√≠a en ti!"
];

  if (calificacion === 0) {
    mensaje = cero[Math.floor(Math.random() * cero.length)];
  } else if (calificacion >= 0 && calificacion < 6) {
    mensaje = bajo[Math.floor(Math.random() * bajo.length)];
  } else if (calificacion >= 6 && calificacion <= 8) {
    mensaje = medio[Math.floor(Math.random() * medio.length)];
  } else if (calificacion >= 9 && calificacion <= 10) {
    mensaje = alto[Math.floor(Math.random() * alto.length)];
  } else {
    mensaje = "Calificaci√≥n no v√°lida.";
  }

  Swal.fire({
    icon: 'info',
    title: 'Resultado',
    text: mensaje,
    confirmButtonText: 'Aceptar',
    allowOutsideClick: false,   // ‚Üê No cerrar al hacer clic fuera
    allowEscapeKey: false       // ‚Üê No cerrar al presionar Esc
  });
}